// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"toktok-backend/internal/adapter/persistence/mysql/ent/avatar"
	"toktok-backend/internal/adapter/persistence/mysql/ent/message"
	"toktok-backend/internal/adapter/persistence/mysql/ent/relation"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RelationCreate is the builder for creating a Relation entity.
type RelationCreate struct {
	config
	mutation *RelationMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RelationCreate) SetDeletedAt(t time.Time) *RelationCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RelationCreate) SetNillableDeletedAt(t *time.Time) *RelationCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RelationCreate) SetCreatedAt(t time.Time) *RelationCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RelationCreate) SetNillableCreatedAt(t *time.Time) *RelationCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RelationCreate) SetUpdatedAt(t time.Time) *RelationCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RelationCreate) SetNillableUpdatedAt(t *time.Time) *RelationCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetState sets the "state" field.
func (rc *RelationCreate) SetState(r relation.State) *RelationCreate {
	rc.mutation.SetState(r)
	return rc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (rc *RelationCreate) SetNillableState(r *relation.State) *RelationCreate {
	if r != nil {
		rc.SetState(*r)
	}
	return rc
}

// SetAlertState sets the "alertState" field.
func (rc *RelationCreate) SetAlertState(rs relation.AlertState) *RelationCreate {
	rc.mutation.SetAlertState(rs)
	return rc
}

// SetNillableAlertState sets the "alertState" field if the given value is not nil.
func (rc *RelationCreate) SetNillableAlertState(rs *relation.AlertState) *RelationCreate {
	if rs != nil {
		rc.SetAlertState(*rs)
	}
	return rc
}

// SetAvatarID sets the "avatar" edge to the Avatar entity by ID.
func (rc *RelationCreate) SetAvatarID(id int) *RelationCreate {
	rc.mutation.SetAvatarID(id)
	return rc
}

// SetNillableAvatarID sets the "avatar" edge to the Avatar entity by ID if the given value is not nil.
func (rc *RelationCreate) SetNillableAvatarID(id *int) *RelationCreate {
	if id != nil {
		rc = rc.SetAvatarID(*id)
	}
	return rc
}

// SetAvatar sets the "avatar" edge to the Avatar entity.
func (rc *RelationCreate) SetAvatar(a *Avatar) *RelationCreate {
	return rc.SetAvatarID(a.ID)
}

// SetFriendID sets the "friend" edge to the Avatar entity by ID.
func (rc *RelationCreate) SetFriendID(id int) *RelationCreate {
	rc.mutation.SetFriendID(id)
	return rc
}

// SetNillableFriendID sets the "friend" edge to the Avatar entity by ID if the given value is not nil.
func (rc *RelationCreate) SetNillableFriendID(id *int) *RelationCreate {
	if id != nil {
		rc = rc.SetFriendID(*id)
	}
	return rc
}

// SetFriend sets the "friend" edge to the Avatar entity.
func (rc *RelationCreate) SetFriend(a *Avatar) *RelationCreate {
	return rc.SetFriendID(a.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (rc *RelationCreate) AddMessageIDs(ids ...int) *RelationCreate {
	rc.mutation.AddMessageIDs(ids...)
	return rc
}

// AddMessages adds the "messages" edges to the Message entity.
func (rc *RelationCreate) AddMessages(m ...*Message) *RelationCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return rc.AddMessageIDs(ids...)
}

// Mutation returns the RelationMutation object of the builder.
func (rc *RelationCreate) Mutation() *RelationMutation {
	return rc.mutation
}

// Save creates the Relation in the database.
func (rc *RelationCreate) Save(ctx context.Context) (*Relation, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RelationCreate) SaveX(ctx context.Context) *Relation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RelationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RelationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RelationCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if relation.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized relation.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := relation.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if relation.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized relation.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := relation.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.State(); !ok {
		v := relation.DefaultState
		rc.mutation.SetState(v)
	}
	if _, ok := rc.mutation.AlertState(); !ok {
		v := relation.DefaultAlertState
		rc.mutation.SetAlertState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RelationCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Relation.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Relation.updated_at"`)}
	}
	if _, ok := rc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Relation.state"`)}
	}
	if v, ok := rc.mutation.State(); ok {
		if err := relation.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Relation.state": %w`, err)}
		}
	}
	if _, ok := rc.mutation.AlertState(); !ok {
		return &ValidationError{Name: "alertState", err: errors.New(`ent: missing required field "Relation.alertState"`)}
	}
	if v, ok := rc.mutation.AlertState(); ok {
		if err := relation.AlertStateValidator(v); err != nil {
			return &ValidationError{Name: "alertState", err: fmt.Errorf(`ent: validator failed for field "Relation.alertState": %w`, err)}
		}
	}
	return nil
}

func (rc *RelationCreate) sqlSave(ctx context.Context) (*Relation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RelationCreate) createSpec() (*Relation, *sqlgraph.CreateSpec) {
	var (
		_node = &Relation{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(relation.Table, sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(relation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(relation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(relation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.State(); ok {
		_spec.SetField(relation.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := rc.mutation.AlertState(); ok {
		_spec.SetField(relation.FieldAlertState, field.TypeEnum, value)
		_node.AlertState = value
	}
	if nodes := rc.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.AvatarTable,
			Columns: []string{relation.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.avatar_avatar_relations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.FriendTable,
			Columns: []string{relation.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.avatar_friend_relations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   relation.MessagesTable,
			Columns: []string{relation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RelationCreateBulk is the builder for creating many Relation entities in bulk.
type RelationCreateBulk struct {
	config
	err      error
	builders []*RelationCreate
}

// Save creates the Relation entities in the database.
func (rcb *RelationCreateBulk) Save(ctx context.Context) ([]*Relation, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Relation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RelationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RelationCreateBulk) SaveX(ctx context.Context) []*Relation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RelationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RelationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
