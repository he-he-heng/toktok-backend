// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/he-he-heng/toktok-backend/ent/attempt"
	"github.com/he-he-heng/toktok-backend/ent/predicate"
)

// AttemptUpdate is the builder for updating Attempt entities.
type AttemptUpdate struct {
	config
	hooks    []Hook
	mutation *AttemptMutation
}

// Where appends a list predicates to the AttemptUpdate builder.
func (au *AttemptUpdate) Where(ps ...predicate.Attempt) *AttemptUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCnt sets the "cnt" field.
func (au *AttemptUpdate) SetCnt(i int) *AttemptUpdate {
	au.mutation.ResetCnt()
	au.mutation.SetCnt(i)
	return au
}

// SetNillableCnt sets the "cnt" field if the given value is not nil.
func (au *AttemptUpdate) SetNillableCnt(i *int) *AttemptUpdate {
	if i != nil {
		au.SetCnt(*i)
	}
	return au
}

// AddCnt adds i to the "cnt" field.
func (au *AttemptUpdate) AddCnt(i int) *AttemptUpdate {
	au.mutation.AddCnt(i)
	return au
}

// SetBreak sets the "break" field.
func (au *AttemptUpdate) SetBreak(b bool) *AttemptUpdate {
	au.mutation.SetBreak(b)
	return au
}

// SetNillableBreak sets the "break" field if the given value is not nil.
func (au *AttemptUpdate) SetNillableBreak(b *bool) *AttemptUpdate {
	if b != nil {
		au.SetBreak(*b)
	}
	return au
}

// SetTimestamp sets the "timestamp" field.
func (au *AttemptUpdate) SetTimestamp(t time.Time) *AttemptUpdate {
	au.mutation.SetTimestamp(t)
	return au
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (au *AttemptUpdate) SetNillableTimestamp(t *time.Time) *AttemptUpdate {
	if t != nil {
		au.SetTimestamp(*t)
	}
	return au
}

// Mutation returns the AttemptMutation object of the builder.
func (au *AttemptUpdate) Mutation() *AttemptMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttemptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttemptUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttemptUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AttemptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(attempt.Table, attempt.Columns, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Cnt(); ok {
		_spec.SetField(attempt.FieldCnt, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedCnt(); ok {
		_spec.AddField(attempt.FieldCnt, field.TypeInt, value)
	}
	if value, ok := au.mutation.Break(); ok {
		_spec.SetField(attempt.FieldBreak, field.TypeBool, value)
	}
	if value, ok := au.mutation.Timestamp(); ok {
		_spec.SetField(attempt.FieldTimestamp, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttemptUpdateOne is the builder for updating a single Attempt entity.
type AttemptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttemptMutation
}

// SetCnt sets the "cnt" field.
func (auo *AttemptUpdateOne) SetCnt(i int) *AttemptUpdateOne {
	auo.mutation.ResetCnt()
	auo.mutation.SetCnt(i)
	return auo
}

// SetNillableCnt sets the "cnt" field if the given value is not nil.
func (auo *AttemptUpdateOne) SetNillableCnt(i *int) *AttemptUpdateOne {
	if i != nil {
		auo.SetCnt(*i)
	}
	return auo
}

// AddCnt adds i to the "cnt" field.
func (auo *AttemptUpdateOne) AddCnt(i int) *AttemptUpdateOne {
	auo.mutation.AddCnt(i)
	return auo
}

// SetBreak sets the "break" field.
func (auo *AttemptUpdateOne) SetBreak(b bool) *AttemptUpdateOne {
	auo.mutation.SetBreak(b)
	return auo
}

// SetNillableBreak sets the "break" field if the given value is not nil.
func (auo *AttemptUpdateOne) SetNillableBreak(b *bool) *AttemptUpdateOne {
	if b != nil {
		auo.SetBreak(*b)
	}
	return auo
}

// SetTimestamp sets the "timestamp" field.
func (auo *AttemptUpdateOne) SetTimestamp(t time.Time) *AttemptUpdateOne {
	auo.mutation.SetTimestamp(t)
	return auo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (auo *AttemptUpdateOne) SetNillableTimestamp(t *time.Time) *AttemptUpdateOne {
	if t != nil {
		auo.SetTimestamp(*t)
	}
	return auo
}

// Mutation returns the AttemptMutation object of the builder.
func (auo *AttemptUpdateOne) Mutation() *AttemptMutation {
	return auo.mutation
}

// Where appends a list predicates to the AttemptUpdate builder.
func (auo *AttemptUpdateOne) Where(ps ...predicate.Attempt) *AttemptUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttemptUpdateOne) Select(field string, fields ...string) *AttemptUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attempt entity.
func (auo *AttemptUpdateOne) Save(ctx context.Context) (*Attempt, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttemptUpdateOne) SaveX(ctx context.Context) *Attempt {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttemptUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AttemptUpdateOne) sqlSave(ctx context.Context) (_node *Attempt, err error) {
	_spec := sqlgraph.NewUpdateSpec(attempt.Table, attempt.Columns, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attempt.FieldID)
		for _, f := range fields {
			if !attempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Cnt(); ok {
		_spec.SetField(attempt.FieldCnt, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedCnt(); ok {
		_spec.AddField(attempt.FieldCnt, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Break(); ok {
		_spec.SetField(attempt.FieldBreak, field.TypeBool, value)
	}
	if value, ok := auo.mutation.Timestamp(); ok {
		_spec.SetField(attempt.FieldTimestamp, field.TypeTime, value)
	}
	_node = &Attempt{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
