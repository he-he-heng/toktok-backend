// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"toktok-backend/internal/adapter/persistence/mysql/ent/message"
	"toktok-backend/internal/adapter/persistence/mysql/ent/predicate"
	"toktok-backend/internal/adapter/persistence/mysql/ent/relation"
	"toktok-backend/internal/adapter/persistence/mysql/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RoomUpdate) SetDeletedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableDeletedAt(t *time.Time) *RoomUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RoomUpdate) ClearDeletedAt() *RoomUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoomUpdate) SetUpdatedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetAvatarID sets the "avatar" edge to the Relation entity by ID.
func (ru *RoomUpdate) SetAvatarID(id int) *RoomUpdate {
	ru.mutation.SetAvatarID(id)
	return ru
}

// SetNillableAvatarID sets the "avatar" edge to the Relation entity by ID if the given value is not nil.
func (ru *RoomUpdate) SetNillableAvatarID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetAvatarID(*id)
	}
	return ru
}

// SetAvatar sets the "avatar" edge to the Relation entity.
func (ru *RoomUpdate) SetAvatar(r *Relation) *RoomUpdate {
	return ru.SetAvatarID(r.ID)
}

// SetFriendID sets the "friend" edge to the Relation entity by ID.
func (ru *RoomUpdate) SetFriendID(id int) *RoomUpdate {
	ru.mutation.SetFriendID(id)
	return ru
}

// SetNillableFriendID sets the "friend" edge to the Relation entity by ID if the given value is not nil.
func (ru *RoomUpdate) SetNillableFriendID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetFriendID(*id)
	}
	return ru
}

// SetFriend sets the "friend" edge to the Relation entity.
func (ru *RoomUpdate) SetFriend(r *Relation) *RoomUpdate {
	return ru.SetFriendID(r.ID)
}

// SetMessagesID sets the "messages" edge to the Message entity by ID.
func (ru *RoomUpdate) SetMessagesID(id int) *RoomUpdate {
	ru.mutation.SetMessagesID(id)
	return ru
}

// SetNillableMessagesID sets the "messages" edge to the Message entity by ID if the given value is not nil.
func (ru *RoomUpdate) SetNillableMessagesID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetMessagesID(*id)
	}
	return ru
}

// SetMessages sets the "messages" edge to the Message entity.
func (ru *RoomUpdate) SetMessages(m *Message) *RoomUpdate {
	return ru.SetMessagesID(m.ID)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearAvatar clears the "avatar" edge to the Relation entity.
func (ru *RoomUpdate) ClearAvatar() *RoomUpdate {
	ru.mutation.ClearAvatar()
	return ru
}

// ClearFriend clears the "friend" edge to the Relation entity.
func (ru *RoomUpdate) ClearFriend() *RoomUpdate {
	ru.mutation.ClearFriend()
	return ru
}

// ClearMessages clears the "messages" edge to the Message entity.
func (ru *RoomUpdate) ClearMessages() *RoomUpdate {
	ru.mutation.ClearMessages()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoomUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if room.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized room.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := room.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(room.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(room.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.AvatarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.AvatarTable,
			Columns: []string{room.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.AvatarTable,
			Columns: []string{room.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.FriendTable,
			Columns: []string{room.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.FriendTable,
			Columns: []string{room.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RoomUpdateOne) SetDeletedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableDeletedAt(t *time.Time) *RoomUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RoomUpdateOne) ClearDeletedAt() *RoomUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoomUpdateOne) SetUpdatedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetAvatarID sets the "avatar" edge to the Relation entity by ID.
func (ruo *RoomUpdateOne) SetAvatarID(id int) *RoomUpdateOne {
	ruo.mutation.SetAvatarID(id)
	return ruo
}

// SetNillableAvatarID sets the "avatar" edge to the Relation entity by ID if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableAvatarID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetAvatarID(*id)
	}
	return ruo
}

// SetAvatar sets the "avatar" edge to the Relation entity.
func (ruo *RoomUpdateOne) SetAvatar(r *Relation) *RoomUpdateOne {
	return ruo.SetAvatarID(r.ID)
}

// SetFriendID sets the "friend" edge to the Relation entity by ID.
func (ruo *RoomUpdateOne) SetFriendID(id int) *RoomUpdateOne {
	ruo.mutation.SetFriendID(id)
	return ruo
}

// SetNillableFriendID sets the "friend" edge to the Relation entity by ID if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableFriendID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetFriendID(*id)
	}
	return ruo
}

// SetFriend sets the "friend" edge to the Relation entity.
func (ruo *RoomUpdateOne) SetFriend(r *Relation) *RoomUpdateOne {
	return ruo.SetFriendID(r.ID)
}

// SetMessagesID sets the "messages" edge to the Message entity by ID.
func (ruo *RoomUpdateOne) SetMessagesID(id int) *RoomUpdateOne {
	ruo.mutation.SetMessagesID(id)
	return ruo
}

// SetNillableMessagesID sets the "messages" edge to the Message entity by ID if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableMessagesID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetMessagesID(*id)
	}
	return ruo
}

// SetMessages sets the "messages" edge to the Message entity.
func (ruo *RoomUpdateOne) SetMessages(m *Message) *RoomUpdateOne {
	return ruo.SetMessagesID(m.ID)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearAvatar clears the "avatar" edge to the Relation entity.
func (ruo *RoomUpdateOne) ClearAvatar() *RoomUpdateOne {
	ruo.mutation.ClearAvatar()
	return ruo
}

// ClearFriend clears the "friend" edge to the Relation entity.
func (ruo *RoomUpdateOne) ClearFriend() *RoomUpdateOne {
	ruo.mutation.ClearFriend()
	return ruo
}

// ClearMessages clears the "messages" edge to the Message entity.
func (ruo *RoomUpdateOne) ClearMessages() *RoomUpdateOne {
	ruo.mutation.ClearMessages()
	return ruo
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoomUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if room.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized room.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := room.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(room.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(room.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.AvatarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.AvatarTable,
			Columns: []string{room.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.AvatarTable,
			Columns: []string{room.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.FriendTable,
			Columns: []string{room.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.FriendTable,
			Columns: []string{room.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
