// Code generated by ent, DO NOT EDIT.

package relation

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the relation type in the database.
	Label = "relation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldAlertState holds the string denoting the alertstate field in the database.
	FieldAlertState = "alert_state"
	// EdgeAvatar holds the string denoting the avatar edge name in mutations.
	EdgeAvatar = "avatar"
	// EdgeFriend holds the string denoting the friend edge name in mutations.
	EdgeFriend = "friend"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the relation in the database.
	Table = "relations"
	// AvatarTable is the table that holds the avatar relation/edge.
	AvatarTable = "relations"
	// AvatarInverseTable is the table name for the Avatar entity.
	// It exists in this package in order to avoid circular dependency with the "avatar" package.
	AvatarInverseTable = "avatars"
	// AvatarColumn is the table column denoting the avatar relation/edge.
	AvatarColumn = "avatar_avatar_relations"
	// FriendTable is the table that holds the friend relation/edge.
	FriendTable = "relations"
	// FriendInverseTable is the table name for the Avatar entity.
	// It exists in this package in order to avoid circular dependency with the "avatar" package.
	FriendInverseTable = "avatars"
	// FriendColumn is the table column denoting the friend relation/edge.
	FriendColumn = "avatar_friend_relations"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "relation_messages"
)

// Columns holds all SQL columns for relation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldState,
	FieldAlertState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "relations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"avatar_avatar_relations",
	"avatar_friend_relations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "toktok-backend/internal/adapter/persistence/database/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// State defines the type for the "state" enum field.
type State string

// StatePending is the default value of the State enum.
const DefaultState = StatePending

// State values.
const (
	StateRequestFriend State = "request-friend"
	StatePending       State = "pending"
	StateFriend        State = "friend"
	StateDecline       State = "decline"
	StateRemove        State = "remove"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateRequestFriend, StatePending, StateFriend, StateDecline, StateRemove:
		return nil
	default:
		return fmt.Errorf("relation: invalid enum value for state field: %q", s)
	}
}

// AlertState defines the type for the "alertState" enum field.
type AlertState string

// AlertStateAllow is the default value of the AlertState enum.
const DefaultAlertState = AlertStateAllow

// AlertState values.
const (
	AlertStateAllow AlertState = "allow"
	AlertStateDeny  AlertState = "deny"
)

func (as AlertState) String() string {
	return string(as)
}

// AlertStateValidator is a validator for the "alertState" field enum values. It is called by the builders before save.
func AlertStateValidator(as AlertState) error {
	switch as {
	case AlertStateAllow, AlertStateDeny:
		return nil
	default:
		return fmt.Errorf("relation: invalid enum value for alertState field: %q", as)
	}
}

// OrderOption defines the ordering options for the Relation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByAlertState orders the results by the alertState field.
func ByAlertState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertState, opts...).ToFunc()
}

// ByAvatarField orders the results by avatar field.
func ByAvatarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAvatarStep(), sql.OrderByField(field, opts...))
	}
}

// ByFriendField orders the results by friend field.
func ByFriendField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendStep(), sql.OrderByField(field, opts...))
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAvatarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AvatarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AvatarTable, AvatarColumn),
	)
}
func newFriendStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FriendTable, FriendColumn),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
	)
}
