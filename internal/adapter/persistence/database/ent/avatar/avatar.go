// Code generated by ent, DO NOT EDIT.

package avatar

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the avatar type in the database.
	Label = "avatar"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldMbti holds the string denoting the mbti field in the database.
	FieldMbti = "mbti"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldIntroduce holds the string denoting the introduce field in the database.
	FieldIntroduce = "introduce"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAvatarRelations holds the string denoting the avatarrelations edge name in mutations.
	EdgeAvatarRelations = "avatarRelations"
	// EdgeFriendRelations holds the string denoting the friendrelations edge name in mutations.
	EdgeFriendRelations = "friendRelations"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the avatar in the database.
	Table = "avatars"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "avatars"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_avatar"
	// AvatarRelationsTable is the table that holds the avatarRelations relation/edge.
	AvatarRelationsTable = "relations"
	// AvatarRelationsInverseTable is the table name for the Relation entity.
	// It exists in this package in order to avoid circular dependency with the "relation" package.
	AvatarRelationsInverseTable = "relations"
	// AvatarRelationsColumn is the table column denoting the avatarRelations relation/edge.
	AvatarRelationsColumn = "avatar_avatar_relations"
	// FriendRelationsTable is the table that holds the friendRelations relation/edge.
	FriendRelationsTable = "relations"
	// FriendRelationsInverseTable is the table name for the Relation entity.
	// It exists in this package in order to avoid circular dependency with the "relation" package.
	FriendRelationsInverseTable = "relations"
	// FriendRelationsColumn is the table column denoting the friendRelations relation/edge.
	FriendRelationsColumn = "avatar_friend_relations"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "avatar_messages"
)

// Columns holds all SQL columns for avatar fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldSex,
	FieldBirthday,
	FieldMbti,
	FieldPicture,
	FieldNickname,
	FieldIntroduce,
	FieldState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "avatars"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_avatar",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "toktok-backend/internal/adapter/persistence/database/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// BirthdayValidator is a validator for the "birthday" field. It is called by the builders before save.
	BirthdayValidator func(string) error
	// MbtiValidator is a validator for the "mbti" field. It is called by the builders before save.
	MbtiValidator func(string) error
	// PictureValidator is a validator for the "picture" field. It is called by the builders before save.
	PictureValidator func(string) error
	// NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	NicknameValidator func(string) error
)

// Sex defines the type for the "sex" enum field.
type Sex string

// Sex values.
const (
	SexMale   Sex = "male"
	SexFemale Sex = "female"
)

func (s Sex) String() string {
	return string(s)
}

// SexValidator is a validator for the "sex" field enum values. It is called by the builders before save.
func SexValidator(s Sex) error {
	switch s {
	case SexMale, SexFemale:
		return nil
	default:
		return fmt.Errorf("avatar: invalid enum value for sex field: %q", s)
	}
}

// State defines the type for the "State" enum field.
type State string

// StateOnline is the default value of the State enum.
const DefaultState = StateOnline

// State values.
const (
	StateOnline  State = "online"
	StateOffline State = "offline"
)

func (_state State) String() string {
	return string(_state)
}

// StateValidator is a validator for the "State" field enum values. It is called by the builders before save.
func StateValidator(_state State) error {
	switch _state {
	case StateOnline, StateOffline:
		return nil
	default:
		return fmt.Errorf("avatar: invalid enum value for State field: %q", _state)
	}
}

// OrderOption defines the ordering options for the Avatar queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// BySex orders the results by the sex field.
func BySex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSex, opts...).ToFunc()
}

// ByBirthday orders the results by the birthday field.
func ByBirthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthday, opts...).ToFunc()
}

// ByMbti orders the results by the mbti field.
func ByMbti(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMbti, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByIntroduce orders the results by the introduce field.
func ByIntroduce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroduce, opts...).ToFunc()
}

// ByState orders the results by the State field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAvatarRelationsCount orders the results by avatarRelations count.
func ByAvatarRelationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAvatarRelationsStep(), opts...)
	}
}

// ByAvatarRelations orders the results by avatarRelations terms.
func ByAvatarRelations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAvatarRelationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendRelationsCount orders the results by friendRelations count.
func ByFriendRelationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendRelationsStep(), opts...)
	}
}

// ByFriendRelations orders the results by friendRelations terms.
func ByFriendRelations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendRelationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
func newAvatarRelationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AvatarRelationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AvatarRelationsTable, AvatarRelationsColumn),
	)
}
func newFriendRelationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendRelationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FriendRelationsTable, FriendRelationsColumn),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
	)
}
