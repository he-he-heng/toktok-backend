// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"toktok-backend/internal/adapter/persistence/mysql/ent/avatar"
	"toktok-backend/internal/adapter/persistence/mysql/ent/predicate"
	"toktok-backend/internal/adapter/persistence/mysql/ent/relation"
	"toktok-backend/internal/adapter/persistence/mysql/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RelationUpdate is the builder for updating Relation entities.
type RelationUpdate struct {
	config
	hooks    []Hook
	mutation *RelationMutation
}

// Where appends a list predicates to the RelationUpdate builder.
func (ru *RelationUpdate) Where(ps ...predicate.Relation) *RelationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RelationUpdate) SetDeletedAt(t time.Time) *RelationUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RelationUpdate) SetNillableDeletedAt(t *time.Time) *RelationUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RelationUpdate) ClearDeletedAt() *RelationUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RelationUpdate) SetUpdatedAt(t time.Time) *RelationUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetState sets the "state" field.
func (ru *RelationUpdate) SetState(r relation.State) *RelationUpdate {
	ru.mutation.SetState(r)
	return ru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ru *RelationUpdate) SetNillableState(r *relation.State) *RelationUpdate {
	if r != nil {
		ru.SetState(*r)
	}
	return ru
}

// SetAlertState sets the "alertState" field.
func (ru *RelationUpdate) SetAlertState(rs relation.AlertState) *RelationUpdate {
	ru.mutation.SetAlertState(rs)
	return ru
}

// SetNillableAlertState sets the "alertState" field if the given value is not nil.
func (ru *RelationUpdate) SetNillableAlertState(rs *relation.AlertState) *RelationUpdate {
	if rs != nil {
		ru.SetAlertState(*rs)
	}
	return ru
}

// SetAvatarID sets the "avatar" edge to the Avatar entity by ID.
func (ru *RelationUpdate) SetAvatarID(id int) *RelationUpdate {
	ru.mutation.SetAvatarID(id)
	return ru
}

// SetNillableAvatarID sets the "avatar" edge to the Avatar entity by ID if the given value is not nil.
func (ru *RelationUpdate) SetNillableAvatarID(id *int) *RelationUpdate {
	if id != nil {
		ru = ru.SetAvatarID(*id)
	}
	return ru
}

// SetAvatar sets the "avatar" edge to the Avatar entity.
func (ru *RelationUpdate) SetAvatar(a *Avatar) *RelationUpdate {
	return ru.SetAvatarID(a.ID)
}

// SetFriendID sets the "friend" edge to the Avatar entity by ID.
func (ru *RelationUpdate) SetFriendID(id int) *RelationUpdate {
	ru.mutation.SetFriendID(id)
	return ru
}

// SetNillableFriendID sets the "friend" edge to the Avatar entity by ID if the given value is not nil.
func (ru *RelationUpdate) SetNillableFriendID(id *int) *RelationUpdate {
	if id != nil {
		ru = ru.SetFriendID(*id)
	}
	return ru
}

// SetFriend sets the "friend" edge to the Avatar entity.
func (ru *RelationUpdate) SetFriend(a *Avatar) *RelationUpdate {
	return ru.SetFriendID(a.ID)
}

// SetAvatarRoomsID sets the "avatar_rooms" edge to the Room entity by ID.
func (ru *RelationUpdate) SetAvatarRoomsID(id int) *RelationUpdate {
	ru.mutation.SetAvatarRoomsID(id)
	return ru
}

// SetNillableAvatarRoomsID sets the "avatar_rooms" edge to the Room entity by ID if the given value is not nil.
func (ru *RelationUpdate) SetNillableAvatarRoomsID(id *int) *RelationUpdate {
	if id != nil {
		ru = ru.SetAvatarRoomsID(*id)
	}
	return ru
}

// SetAvatarRooms sets the "avatar_rooms" edge to the Room entity.
func (ru *RelationUpdate) SetAvatarRooms(r *Room) *RelationUpdate {
	return ru.SetAvatarRoomsID(r.ID)
}

// SetFriendRoomsID sets the "friend_rooms" edge to the Room entity by ID.
func (ru *RelationUpdate) SetFriendRoomsID(id int) *RelationUpdate {
	ru.mutation.SetFriendRoomsID(id)
	return ru
}

// SetNillableFriendRoomsID sets the "friend_rooms" edge to the Room entity by ID if the given value is not nil.
func (ru *RelationUpdate) SetNillableFriendRoomsID(id *int) *RelationUpdate {
	if id != nil {
		ru = ru.SetFriendRoomsID(*id)
	}
	return ru
}

// SetFriendRooms sets the "friend_rooms" edge to the Room entity.
func (ru *RelationUpdate) SetFriendRooms(r *Room) *RelationUpdate {
	return ru.SetFriendRoomsID(r.ID)
}

// Mutation returns the RelationMutation object of the builder.
func (ru *RelationUpdate) Mutation() *RelationMutation {
	return ru.mutation
}

// ClearAvatar clears the "avatar" edge to the Avatar entity.
func (ru *RelationUpdate) ClearAvatar() *RelationUpdate {
	ru.mutation.ClearAvatar()
	return ru
}

// ClearFriend clears the "friend" edge to the Avatar entity.
func (ru *RelationUpdate) ClearFriend() *RelationUpdate {
	ru.mutation.ClearFriend()
	return ru
}

// ClearAvatarRooms clears the "avatar_rooms" edge to the Room entity.
func (ru *RelationUpdate) ClearAvatarRooms() *RelationUpdate {
	ru.mutation.ClearAvatarRooms()
	return ru
}

// ClearFriendRooms clears the "friend_rooms" edge to the Room entity.
func (ru *RelationUpdate) ClearFriendRooms() *RelationUpdate {
	ru.mutation.ClearFriendRooms()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RelationUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RelationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RelationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RelationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RelationUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if relation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized relation.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := relation.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RelationUpdate) check() error {
	if v, ok := ru.mutation.State(); ok {
		if err := relation.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Relation.state": %w`, err)}
		}
	}
	if v, ok := ru.mutation.AlertState(); ok {
		if err := relation.AlertStateValidator(v); err != nil {
			return &ValidationError{Name: "alertState", err: fmt.Errorf(`ent: validator failed for field "Relation.alertState": %w`, err)}
		}
	}
	return nil
}

func (ru *RelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(relation.Table, relation.Columns, sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(relation.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(relation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(relation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.State(); ok {
		_spec.SetField(relation.FieldState, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.AlertState(); ok {
		_spec.SetField(relation.FieldAlertState, field.TypeEnum, value)
	}
	if ru.mutation.AvatarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.AvatarTable,
			Columns: []string{relation.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.AvatarTable,
			Columns: []string{relation.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.FriendTable,
			Columns: []string{relation.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.FriendTable,
			Columns: []string{relation.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AvatarRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.AvatarRoomsTable,
			Columns: []string{relation.AvatarRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AvatarRoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.AvatarRoomsTable,
			Columns: []string{relation.AvatarRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FriendRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.FriendRoomsTable,
			Columns: []string{relation.FriendRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FriendRoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.FriendRoomsTable,
			Columns: []string{relation.FriendRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RelationUpdateOne is the builder for updating a single Relation entity.
type RelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RelationMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RelationUpdateOne) SetDeletedAt(t time.Time) *RelationUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RelationUpdateOne) SetNillableDeletedAt(t *time.Time) *RelationUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RelationUpdateOne) ClearDeletedAt() *RelationUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RelationUpdateOne) SetUpdatedAt(t time.Time) *RelationUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetState sets the "state" field.
func (ruo *RelationUpdateOne) SetState(r relation.State) *RelationUpdateOne {
	ruo.mutation.SetState(r)
	return ruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ruo *RelationUpdateOne) SetNillableState(r *relation.State) *RelationUpdateOne {
	if r != nil {
		ruo.SetState(*r)
	}
	return ruo
}

// SetAlertState sets the "alertState" field.
func (ruo *RelationUpdateOne) SetAlertState(rs relation.AlertState) *RelationUpdateOne {
	ruo.mutation.SetAlertState(rs)
	return ruo
}

// SetNillableAlertState sets the "alertState" field if the given value is not nil.
func (ruo *RelationUpdateOne) SetNillableAlertState(rs *relation.AlertState) *RelationUpdateOne {
	if rs != nil {
		ruo.SetAlertState(*rs)
	}
	return ruo
}

// SetAvatarID sets the "avatar" edge to the Avatar entity by ID.
func (ruo *RelationUpdateOne) SetAvatarID(id int) *RelationUpdateOne {
	ruo.mutation.SetAvatarID(id)
	return ruo
}

// SetNillableAvatarID sets the "avatar" edge to the Avatar entity by ID if the given value is not nil.
func (ruo *RelationUpdateOne) SetNillableAvatarID(id *int) *RelationUpdateOne {
	if id != nil {
		ruo = ruo.SetAvatarID(*id)
	}
	return ruo
}

// SetAvatar sets the "avatar" edge to the Avatar entity.
func (ruo *RelationUpdateOne) SetAvatar(a *Avatar) *RelationUpdateOne {
	return ruo.SetAvatarID(a.ID)
}

// SetFriendID sets the "friend" edge to the Avatar entity by ID.
func (ruo *RelationUpdateOne) SetFriendID(id int) *RelationUpdateOne {
	ruo.mutation.SetFriendID(id)
	return ruo
}

// SetNillableFriendID sets the "friend" edge to the Avatar entity by ID if the given value is not nil.
func (ruo *RelationUpdateOne) SetNillableFriendID(id *int) *RelationUpdateOne {
	if id != nil {
		ruo = ruo.SetFriendID(*id)
	}
	return ruo
}

// SetFriend sets the "friend" edge to the Avatar entity.
func (ruo *RelationUpdateOne) SetFriend(a *Avatar) *RelationUpdateOne {
	return ruo.SetFriendID(a.ID)
}

// SetAvatarRoomsID sets the "avatar_rooms" edge to the Room entity by ID.
func (ruo *RelationUpdateOne) SetAvatarRoomsID(id int) *RelationUpdateOne {
	ruo.mutation.SetAvatarRoomsID(id)
	return ruo
}

// SetNillableAvatarRoomsID sets the "avatar_rooms" edge to the Room entity by ID if the given value is not nil.
func (ruo *RelationUpdateOne) SetNillableAvatarRoomsID(id *int) *RelationUpdateOne {
	if id != nil {
		ruo = ruo.SetAvatarRoomsID(*id)
	}
	return ruo
}

// SetAvatarRooms sets the "avatar_rooms" edge to the Room entity.
func (ruo *RelationUpdateOne) SetAvatarRooms(r *Room) *RelationUpdateOne {
	return ruo.SetAvatarRoomsID(r.ID)
}

// SetFriendRoomsID sets the "friend_rooms" edge to the Room entity by ID.
func (ruo *RelationUpdateOne) SetFriendRoomsID(id int) *RelationUpdateOne {
	ruo.mutation.SetFriendRoomsID(id)
	return ruo
}

// SetNillableFriendRoomsID sets the "friend_rooms" edge to the Room entity by ID if the given value is not nil.
func (ruo *RelationUpdateOne) SetNillableFriendRoomsID(id *int) *RelationUpdateOne {
	if id != nil {
		ruo = ruo.SetFriendRoomsID(*id)
	}
	return ruo
}

// SetFriendRooms sets the "friend_rooms" edge to the Room entity.
func (ruo *RelationUpdateOne) SetFriendRooms(r *Room) *RelationUpdateOne {
	return ruo.SetFriendRoomsID(r.ID)
}

// Mutation returns the RelationMutation object of the builder.
func (ruo *RelationUpdateOne) Mutation() *RelationMutation {
	return ruo.mutation
}

// ClearAvatar clears the "avatar" edge to the Avatar entity.
func (ruo *RelationUpdateOne) ClearAvatar() *RelationUpdateOne {
	ruo.mutation.ClearAvatar()
	return ruo
}

// ClearFriend clears the "friend" edge to the Avatar entity.
func (ruo *RelationUpdateOne) ClearFriend() *RelationUpdateOne {
	ruo.mutation.ClearFriend()
	return ruo
}

// ClearAvatarRooms clears the "avatar_rooms" edge to the Room entity.
func (ruo *RelationUpdateOne) ClearAvatarRooms() *RelationUpdateOne {
	ruo.mutation.ClearAvatarRooms()
	return ruo
}

// ClearFriendRooms clears the "friend_rooms" edge to the Room entity.
func (ruo *RelationUpdateOne) ClearFriendRooms() *RelationUpdateOne {
	ruo.mutation.ClearFriendRooms()
	return ruo
}

// Where appends a list predicates to the RelationUpdate builder.
func (ruo *RelationUpdateOne) Where(ps ...predicate.Relation) *RelationUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RelationUpdateOne) Select(field string, fields ...string) *RelationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Relation entity.
func (ruo *RelationUpdateOne) Save(ctx context.Context) (*Relation, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RelationUpdateOne) SaveX(ctx context.Context) *Relation {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RelationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RelationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RelationUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if relation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized relation.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := relation.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RelationUpdateOne) check() error {
	if v, ok := ruo.mutation.State(); ok {
		if err := relation.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Relation.state": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.AlertState(); ok {
		if err := relation.AlertStateValidator(v); err != nil {
			return &ValidationError{Name: "alertState", err: fmt.Errorf(`ent: validator failed for field "Relation.alertState": %w`, err)}
		}
	}
	return nil
}

func (ruo *RelationUpdateOne) sqlSave(ctx context.Context) (_node *Relation, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(relation.Table, relation.Columns, sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Relation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, relation.FieldID)
		for _, f := range fields {
			if !relation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != relation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(relation.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(relation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(relation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.State(); ok {
		_spec.SetField(relation.FieldState, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.AlertState(); ok {
		_spec.SetField(relation.FieldAlertState, field.TypeEnum, value)
	}
	if ruo.mutation.AvatarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.AvatarTable,
			Columns: []string{relation.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AvatarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.AvatarTable,
			Columns: []string{relation.AvatarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.FriendTable,
			Columns: []string{relation.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   relation.FriendTable,
			Columns: []string{relation.FriendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AvatarRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.AvatarRoomsTable,
			Columns: []string{relation.AvatarRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AvatarRoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.AvatarRoomsTable,
			Columns: []string{relation.AvatarRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FriendRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.FriendRoomsTable,
			Columns: []string{relation.FriendRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FriendRoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   relation.FriendRoomsTable,
			Columns: []string{relation.FriendRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Relation{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
