// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"toktok-backend/internal/adapter/persistence/mysql/ent/avatar"
	"toktok-backend/internal/adapter/persistence/mysql/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Avatar is the model entity for the Avatar schema.
type Avatar struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex avatar.Sex `json:"sex,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday string `json:"birthday,omitempty"`
	// Mbti holds the value of the "mbti" field.
	Mbti *string `json:"mbti,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture avatar.Picture `json:"picture,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Introduce holds the value of the "introduce" field.
	Introduce *string `json:"introduce,omitempty"`
	// State holds the value of the "state" field.
	State avatar.State `json:"state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AvatarQuery when eager-loading is set.
	Edges        AvatarEdges `json:"edges"`
	user_avatar  *int
	selectValues sql.SelectValues
}

// AvatarEdges holds the relations/edges for other nodes in the graph.
type AvatarEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// AvatarRelations holds the value of the avatar_relations edge.
	AvatarRelations []*Relation `json:"avatar_relations,omitempty"`
	// FriendRelations holds the value of the friend_relations edge.
	FriendRelations []*Relation `json:"friend_relations,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AvatarEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AvatarRelationsOrErr returns the AvatarRelations value or an error if the edge
// was not loaded in eager-loading.
func (e AvatarEdges) AvatarRelationsOrErr() ([]*Relation, error) {
	if e.loadedTypes[1] {
		return e.AvatarRelations, nil
	}
	return nil, &NotLoadedError{edge: "avatar_relations"}
}

// FriendRelationsOrErr returns the FriendRelations value or an error if the edge
// was not loaded in eager-loading.
func (e AvatarEdges) FriendRelationsOrErr() ([]*Relation, error) {
	if e.loadedTypes[2] {
		return e.FriendRelations, nil
	}
	return nil, &NotLoadedError{edge: "friend_relations"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e AvatarEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[3] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Avatar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case avatar.FieldID:
			values[i] = new(sql.NullInt64)
		case avatar.FieldSex, avatar.FieldBirthday, avatar.FieldMbti, avatar.FieldPicture, avatar.FieldNickname, avatar.FieldIntroduce, avatar.FieldState:
			values[i] = new(sql.NullString)
		case avatar.FieldDeletedAt, avatar.FieldCreatedAt, avatar.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case avatar.ForeignKeys[0]: // user_avatar
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Avatar fields.
func (a *Avatar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case avatar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case avatar.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case avatar.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case avatar.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case avatar.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				a.Sex = avatar.Sex(value.String)
			}
		case avatar.FieldBirthday:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				a.Birthday = value.String
			}
		case avatar.FieldMbti:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mbti", values[i])
			} else if value.Valid {
				a.Mbti = new(string)
				*a.Mbti = value.String
			}
		case avatar.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				a.Picture = avatar.Picture(value.String)
			}
		case avatar.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case avatar.FieldIntroduce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduce", values[i])
			} else if value.Valid {
				a.Introduce = new(string)
				*a.Introduce = value.String
			}
		case avatar.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				a.State = avatar.State(value.String)
			}
		case avatar.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_avatar", value)
			} else if value.Valid {
				a.user_avatar = new(int)
				*a.user_avatar = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Avatar.
// This includes values selected through modifiers, order, etc.
func (a *Avatar) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Avatar entity.
func (a *Avatar) QueryUser() *UserQuery {
	return NewAvatarClient(a.config).QueryUser(a)
}

// QueryAvatarRelations queries the "avatar_relations" edge of the Avatar entity.
func (a *Avatar) QueryAvatarRelations() *RelationQuery {
	return NewAvatarClient(a.config).QueryAvatarRelations(a)
}

// QueryFriendRelations queries the "friend_relations" edge of the Avatar entity.
func (a *Avatar) QueryFriendRelations() *RelationQuery {
	return NewAvatarClient(a.config).QueryFriendRelations(a)
}

// QueryMessages queries the "messages" edge of the Avatar entity.
func (a *Avatar) QueryMessages() *MessageQuery {
	return NewAvatarClient(a.config).QueryMessages(a)
}

// Update returns a builder for updating this Avatar.
// Note that you need to call Avatar.Unwrap() before calling this method if this Avatar
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Avatar) Update() *AvatarUpdateOne {
	return NewAvatarClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Avatar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Avatar) Unwrap() *Avatar {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Avatar is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Avatar) String() string {
	var builder strings.Builder
	builder.WriteString("Avatar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", a.Sex))
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(a.Birthday)
	builder.WriteString(", ")
	if v := a.Mbti; v != nil {
		builder.WriteString("mbti=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("picture=")
	builder.WriteString(fmt.Sprintf("%v", a.Picture))
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", ")
	if v := a.Introduce; v != nil {
		builder.WriteString("introduce=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", a.State))
	builder.WriteByte(')')
	return builder.String()
}

// Avatars is a parsable slice of Avatar.
type Avatars []*Avatar
