// Code generated by ent, DO NOT EDIT.

package attempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/he-he-heng/toktok-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldID, id))
}

// Cnt applies equality check predicate on the "cnt" field. It's identical to CntEQ.
func Cnt(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldCnt, v))
}

// Break applies equality check predicate on the "break" field. It's identical to BreakEQ.
func Break(v bool) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldBreak, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldTimestamp, v))
}

// CntEQ applies the EQ predicate on the "cnt" field.
func CntEQ(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldCnt, v))
}

// CntNEQ applies the NEQ predicate on the "cnt" field.
func CntNEQ(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldCnt, v))
}

// CntIn applies the In predicate on the "cnt" field.
func CntIn(vs ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldCnt, vs...))
}

// CntNotIn applies the NotIn predicate on the "cnt" field.
func CntNotIn(vs ...int) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldCnt, vs...))
}

// CntGT applies the GT predicate on the "cnt" field.
func CntGT(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldCnt, v))
}

// CntGTE applies the GTE predicate on the "cnt" field.
func CntGTE(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldCnt, v))
}

// CntLT applies the LT predicate on the "cnt" field.
func CntLT(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldCnt, v))
}

// CntLTE applies the LTE predicate on the "cnt" field.
func CntLTE(v int) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldCnt, v))
}

// BreakEQ applies the EQ predicate on the "break" field.
func BreakEQ(v bool) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldBreak, v))
}

// BreakNEQ applies the NEQ predicate on the "break" field.
func BreakNEQ(v bool) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldBreak, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.NotPredicates(p))
}
