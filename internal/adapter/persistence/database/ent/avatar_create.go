// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"toktok-backend/internal/adapter/persistence/database/ent/avatar"
	"toktok-backend/internal/adapter/persistence/database/ent/message"
	"toktok-backend/internal/adapter/persistence/database/ent/relation"
	"toktok-backend/internal/adapter/persistence/database/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AvatarCreate is the builder for creating a Avatar entity.
type AvatarCreate struct {
	config
	mutation *AvatarMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AvatarCreate) SetCreatedAt(t time.Time) *AvatarCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableCreatedAt(t *time.Time) *AvatarCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AvatarCreate) SetUpdatedAt(t time.Time) *AvatarCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableUpdatedAt(t *time.Time) *AvatarCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AvatarCreate) SetDeletedAt(t time.Time) *AvatarCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableDeletedAt(t *time.Time) *AvatarCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetSex sets the "sex" field.
func (ac *AvatarCreate) SetSex(a avatar.Sex) *AvatarCreate {
	ac.mutation.SetSex(a)
	return ac
}

// SetBirthday sets the "birthday" field.
func (ac *AvatarCreate) SetBirthday(s string) *AvatarCreate {
	ac.mutation.SetBirthday(s)
	return ac
}

// SetMbti sets the "mbti" field.
func (ac *AvatarCreate) SetMbti(s string) *AvatarCreate {
	ac.mutation.SetMbti(s)
	return ac
}

// SetNillableMbti sets the "mbti" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableMbti(s *string) *AvatarCreate {
	if s != nil {
		ac.SetMbti(*s)
	}
	return ac
}

// SetPicture sets the "picture" field.
func (ac *AvatarCreate) SetPicture(s string) *AvatarCreate {
	ac.mutation.SetPicture(s)
	return ac
}

// SetNickname sets the "nickname" field.
func (ac *AvatarCreate) SetNickname(s string) *AvatarCreate {
	ac.mutation.SetNickname(s)
	return ac
}

// SetIntroduce sets the "introduce" field.
func (ac *AvatarCreate) SetIntroduce(s string) *AvatarCreate {
	ac.mutation.SetIntroduce(s)
	return ac
}

// SetNillableIntroduce sets the "introduce" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableIntroduce(s *string) *AvatarCreate {
	if s != nil {
		ac.SetIntroduce(*s)
	}
	return ac
}

// SetState sets the "State" field.
func (ac *AvatarCreate) SetState(a avatar.State) *AvatarCreate {
	ac.mutation.SetState(a)
	return ac
}

// SetNillableState sets the "State" field if the given value is not nil.
func (ac *AvatarCreate) SetNillableState(a *avatar.State) *AvatarCreate {
	if a != nil {
		ac.SetState(*a)
	}
	return ac
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ac *AvatarCreate) SetUserID(id int) *AvatarCreate {
	ac.mutation.SetUserID(id)
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AvatarCreate) SetUser(u *User) *AvatarCreate {
	return ac.SetUserID(u.ID)
}

// AddAvatarRelationIDs adds the "avatarRelations" edge to the Relation entity by IDs.
func (ac *AvatarCreate) AddAvatarRelationIDs(ids ...int) *AvatarCreate {
	ac.mutation.AddAvatarRelationIDs(ids...)
	return ac
}

// AddAvatarRelations adds the "avatarRelations" edges to the Relation entity.
func (ac *AvatarCreate) AddAvatarRelations(r ...*Relation) *AvatarCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddAvatarRelationIDs(ids...)
}

// AddFriendRelationIDs adds the "friendRelations" edge to the Relation entity by IDs.
func (ac *AvatarCreate) AddFriendRelationIDs(ids ...int) *AvatarCreate {
	ac.mutation.AddFriendRelationIDs(ids...)
	return ac
}

// AddFriendRelations adds the "friendRelations" edges to the Relation entity.
func (ac *AvatarCreate) AddFriendRelations(r ...*Relation) *AvatarCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddFriendRelationIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (ac *AvatarCreate) AddMessageIDs(ids ...int) *AvatarCreate {
	ac.mutation.AddMessageIDs(ids...)
	return ac
}

// AddMessages adds the "messages" edges to the Message entity.
func (ac *AvatarCreate) AddMessages(m ...*Message) *AvatarCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ac.AddMessageIDs(ids...)
}

// Mutation returns the AvatarMutation object of the builder.
func (ac *AvatarCreate) Mutation() *AvatarMutation {
	return ac.mutation
}

// Save creates the Avatar in the database.
func (ac *AvatarCreate) Save(ctx context.Context) (*Avatar, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AvatarCreate) SaveX(ctx context.Context) *Avatar {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AvatarCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AvatarCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AvatarCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if avatar.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized avatar.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := avatar.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if avatar.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized avatar.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := avatar.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.State(); !ok {
		v := avatar.DefaultState
		ac.mutation.SetState(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AvatarCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Avatar.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Avatar.updated_at"`)}
	}
	if _, ok := ac.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "Avatar.sex"`)}
	}
	if v, ok := ac.mutation.Sex(); ok {
		if err := avatar.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "Avatar.sex": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Birthday(); !ok {
		return &ValidationError{Name: "birthday", err: errors.New(`ent: missing required field "Avatar.birthday"`)}
	}
	if v, ok := ac.mutation.Birthday(); ok {
		if err := avatar.BirthdayValidator(v); err != nil {
			return &ValidationError{Name: "birthday", err: fmt.Errorf(`ent: validator failed for field "Avatar.birthday": %w`, err)}
		}
	}
	if v, ok := ac.mutation.Mbti(); ok {
		if err := avatar.MbtiValidator(v); err != nil {
			return &ValidationError{Name: "mbti", err: fmt.Errorf(`ent: validator failed for field "Avatar.mbti": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Picture(); !ok {
		return &ValidationError{Name: "picture", err: errors.New(`ent: missing required field "Avatar.picture"`)}
	}
	if v, ok := ac.mutation.Picture(); ok {
		if err := avatar.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "Avatar.picture": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Avatar.nickname"`)}
	}
	if v, ok := ac.mutation.Nickname(); ok {
		if err := avatar.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Avatar.nickname": %w`, err)}
		}
	}
	if _, ok := ac.mutation.State(); !ok {
		return &ValidationError{Name: "State", err: errors.New(`ent: missing required field "Avatar.State"`)}
	}
	if v, ok := ac.mutation.State(); ok {
		if err := avatar.StateValidator(v); err != nil {
			return &ValidationError{Name: "State", err: fmt.Errorf(`ent: validator failed for field "Avatar.State": %w`, err)}
		}
	}
	if len(ac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Avatar.user"`)}
	}
	return nil
}

func (ac *AvatarCreate) sqlSave(ctx context.Context) (*Avatar, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AvatarCreate) createSpec() (*Avatar, *sqlgraph.CreateSpec) {
	var (
		_node = &Avatar{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(avatar.Table, sqlgraph.NewFieldSpec(avatar.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(avatar.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(avatar.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(avatar.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Sex(); ok {
		_spec.SetField(avatar.FieldSex, field.TypeEnum, value)
		_node.Sex = value
	}
	if value, ok := ac.mutation.Birthday(); ok {
		_spec.SetField(avatar.FieldBirthday, field.TypeString, value)
		_node.Birthday = value
	}
	if value, ok := ac.mutation.Mbti(); ok {
		_spec.SetField(avatar.FieldMbti, field.TypeString, value)
		_node.Mbti = &value
	}
	if value, ok := ac.mutation.Picture(); ok {
		_spec.SetField(avatar.FieldPicture, field.TypeString, value)
		_node.Picture = value
	}
	if value, ok := ac.mutation.Nickname(); ok {
		_spec.SetField(avatar.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := ac.mutation.Introduce(); ok {
		_spec.SetField(avatar.FieldIntroduce, field.TypeString, value)
		_node.Introduce = &value
	}
	if value, ok := ac.mutation.State(); ok {
		_spec.SetField(avatar.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   avatar.UserTable,
			Columns: []string{avatar.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_avatar = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AvatarRelationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   avatar.AvatarRelationsTable,
			Columns: []string{avatar.AvatarRelationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FriendRelationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   avatar.FriendRelationsTable,
			Columns: []string{avatar.FriendRelationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   avatar.MessagesTable,
			Columns: []string{avatar.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AvatarCreateBulk is the builder for creating many Avatar entities in bulk.
type AvatarCreateBulk struct {
	config
	err      error
	builders []*AvatarCreate
}

// Save creates the Avatar entities in the database.
func (acb *AvatarCreateBulk) Save(ctx context.Context) ([]*Avatar, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Avatar, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AvatarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AvatarCreateBulk) SaveX(ctx context.Context) []*Avatar {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AvatarCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AvatarCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
