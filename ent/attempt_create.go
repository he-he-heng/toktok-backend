// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/he-he-heng/toktok-backend/ent/attempt"
)

// AttemptCreate is the builder for creating a Attempt entity.
type AttemptCreate struct {
	config
	mutation *AttemptMutation
	hooks    []Hook
}

// SetCnt sets the "cnt" field.
func (ac *AttemptCreate) SetCnt(i int) *AttemptCreate {
	ac.mutation.SetCnt(i)
	return ac
}

// SetNillableCnt sets the "cnt" field if the given value is not nil.
func (ac *AttemptCreate) SetNillableCnt(i *int) *AttemptCreate {
	if i != nil {
		ac.SetCnt(*i)
	}
	return ac
}

// SetBreak sets the "break" field.
func (ac *AttemptCreate) SetBreak(b bool) *AttemptCreate {
	ac.mutation.SetBreak(b)
	return ac
}

// SetNillableBreak sets the "break" field if the given value is not nil.
func (ac *AttemptCreate) SetNillableBreak(b *bool) *AttemptCreate {
	if b != nil {
		ac.SetBreak(*b)
	}
	return ac
}

// SetTimestamp sets the "timestamp" field.
func (ac *AttemptCreate) SetTimestamp(t time.Time) *AttemptCreate {
	ac.mutation.SetTimestamp(t)
	return ac
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ac *AttemptCreate) SetNillableTimestamp(t *time.Time) *AttemptCreate {
	if t != nil {
		ac.SetTimestamp(*t)
	}
	return ac
}

// Mutation returns the AttemptMutation object of the builder.
func (ac *AttemptCreate) Mutation() *AttemptMutation {
	return ac.mutation
}

// Save creates the Attempt in the database.
func (ac *AttemptCreate) Save(ctx context.Context) (*Attempt, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttemptCreate) SaveX(ctx context.Context) *Attempt {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttemptCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttemptCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttemptCreate) defaults() {
	if _, ok := ac.mutation.Cnt(); !ok {
		v := attempt.DefaultCnt
		ac.mutation.SetCnt(v)
	}
	if _, ok := ac.mutation.Break(); !ok {
		v := attempt.DefaultBreak
		ac.mutation.SetBreak(v)
	}
	if _, ok := ac.mutation.Timestamp(); !ok {
		v := attempt.DefaultTimestamp()
		ac.mutation.SetTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttemptCreate) check() error {
	if _, ok := ac.mutation.Cnt(); !ok {
		return &ValidationError{Name: "cnt", err: errors.New(`ent: missing required field "Attempt.cnt"`)}
	}
	if _, ok := ac.mutation.Break(); !ok {
		return &ValidationError{Name: "break", err: errors.New(`ent: missing required field "Attempt.break"`)}
	}
	if _, ok := ac.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Attempt.timestamp"`)}
	}
	return nil
}

func (ac *AttemptCreate) sqlSave(ctx context.Context) (*Attempt, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AttemptCreate) createSpec() (*Attempt, *sqlgraph.CreateSpec) {
	var (
		_node = &Attempt{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(attempt.Table, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Cnt(); ok {
		_spec.SetField(attempt.FieldCnt, field.TypeInt, value)
		_node.Cnt = value
	}
	if value, ok := ac.mutation.Break(); ok {
		_spec.SetField(attempt.FieldBreak, field.TypeBool, value)
		_node.Break = value
	}
	if value, ok := ac.mutation.Timestamp(); ok {
		_spec.SetField(attempt.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	return _node, _spec
}

// AttemptCreateBulk is the builder for creating many Attempt entities in bulk.
type AttemptCreateBulk struct {
	config
	err      error
	builders []*AttemptCreate
}

// Save creates the Attempt entities in the database.
func (acb *AttemptCreateBulk) Save(ctx context.Context) ([]*Attempt, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attempt, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttemptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttemptCreateBulk) SaveX(ctx context.Context) []*Attempt {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttemptCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttemptCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
